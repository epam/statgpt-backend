[project]
name = "statgpt"
version = "1.0.15"
description = "StatGPT: Platform for talking to Official Statistics data & SDMX"
readme = "README.md"
requires-python = ">=3.11,<3.12"
dependencies = [
    # Core framework & API
    'aidial-sdk[telemetry] (>=0.25.1,<0.26.0)',  # DIAL integration SDK
    'fastapi (>=0.117.1,<0.118.0)',              # Web framework
    'pydantic (>=2.11.7,<3.0.0)',                # Data validation
    'pydantic-core (>=2.33.2,<3.0.0)',           # Pydantic core functionality
    'pydantic-settings (>=2.10.1,<3.0.0)',       # Settings management

    # SDMX & Data processing
    'sdmx1 (>=2.14.0,<3.0.0)',                   # SDMX data format support
    'pandas (>=2.2.3,<3.0.0)',                   # Data manipulation
    'plotly (>=5.21.0,<6.0.0)',                  # Data visualization

    # Database & Vector storage
    'asyncpg (>=0.29.0,<0.30.0)',                # Async PostgreSQL driver
    'pgvector (>=0.2.5,<0.3.0)',                 # Vector similarity search
    'alembic (>=1.13.1,<2.0.0)',                 # Database migrations
    'psycopg[binary,pool] (>=3.1.18,<4.0.0)',    # PostgreSQL adapter

    # Search
    'elasticsearch[async] (>=8.14.0,<9.0.0)',    # Elasticsearch client

    # LLM & AI
    'langchain (>=0.3.4,<0.4.0)',                # LLM orchestration framework
    'langchain-openai (>=0.2.3,<0.3.0)',         # OpenAI LangChain integration
    'langchain-community (>=0.3.27,<0.4.0)',     # Community LangChain tools
    'openai (>=1.52.0,<2.0.0)',                  # OpenAI API client

    # HTTP & Networking
    'httpcore (>=1.0.9, <2.0.0)',                # HTTP core functionality
    'aiohttp (>=3.12.14,<3.13.0)',               # Async HTTP client/server
    'requests (>=2.32.5,<3.0.0)',                # HTTP library

    # Authentication & Security
    'azure-identity (>=1.17.1,<2.0.0)',          # Azure authentication
    'PyJWT (>=2.8.0,<3.0.0)',                    # JSON Web Token support

    # Configuration & File handling
    'python-dotenv (>=1.0.1,<2.0.0)',            # Environment variable management
    'pyyaml (>=6.0.1,<7.0.0)',                   # YAML file support
    'python-multipart (>=0.0.19,<0.0.20)',       # Multipart form data

    # Utilities
    'python-dateutil (>=2.9.0.post0,<3.0.0)',    # Date/time utilities
    'tzlocal (>=5.2,<6.0)',                      # Local timezone detection
    'greenlet (>=3.0.3,<4.0.0)',                 # Lightweight concurrency
    'async-lru (>=2.0.5,<3.0.0)',                # Async LRU cache
    'tabulate (>=0.9.0,<0.10.0)',                # Table formatting
    'markdown (>=3.7,<4.0)',                     # Markdown processing
    'setuptools (>=80.4.0)',                     # Package management
]

[tool.isort]
profile = "black"
line_length = 100
# https://pycqa.github.io/isort/docs/configuration/options.html
# Src Paths: Add an explicitly defined source path
# (modules within src paths have their imports automatically categorized as first_party).
# see also: https://github.com/PyCQA/isort/issues/1147
src_paths = ["src"]

[tool.black]
line-length = 100
skip-string-normalization = true
target-version = ["py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
)/
'''

[tool.pyright]
typeCheckingMode = "basic"
reportIncompatibleMethodOverride = "error"
reportUnusedVariable = "error"

exclude = [
    ".git",
    ".venv",
    ".nox",
    "**/__pycache__",
    "**/.pytest_cache"
]

[tool.autoflake]
ignore_init_module_imports = true
remove_all_unused_imports = true
in_place = true
recursive = true
quiet = true
exclude = [
    '\.git',
    '\.venv',
    '\.nox',
    '\.pytest_cache',
    '__pycache__'
]

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.mypy]
plugins = ["pydantic.mypy"]
ignore_missing_imports = true

[tool.poetry]
package-mode = false
requires-poetry = '>=2.0.0,<3.0.0'

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8"

[tool.poetry.dependencies]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = { version = "^24.4.0", extras = ["jupyter"] }
isort = "^5.13.2"
langchain-cli = "^0.0.31"
pytest = "^8.1.1"
pytest-asyncio = "^0.23.7"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
pytest-sugar = "^1.0.0"
pytest-xdist = "^3.6.1"
mypy = "^1.9.0"
types-requests = "^2.31.0.20240406"
pandas-stubs = "^2.2.1.240316"
types-pyyaml = "^6.0.12.20240311"
types-python-dateutil = "^2.9.0.20240316"
pre-commit = "^3.8.0"
bs4 = "^0.0.2"
markdown = "^3.7"
xlsxwriter = "^3.2.0"
flake8 = "^7.1.2"
autoflake = "^2.3.1"
pyright = "^1.1.394"
freezegun = "^1.5.1"
aidial-rag-eval = ">=0.2.0,<0.3.0"
# jinja2 is required for the aidial-rag-eval package, since it uses langchain with Jinja2 templates, which are optional for langchain
jinja2 = "^3.1.6"

[tool.poetry.group.experiments]
optional = true

[tool.poetry.group.experiments.dependencies]
jupyterlab = "^4.1.6"
pandas = { extras = ["excel"], version = "^2.2.2" }
langgraph = "^0.4.3"
opik = "^1.7.23"
pdfplumber = "^0.11.6"
aiofiles = "^24.1.0"

[[tool.poetry.source]]
name = "pytorch_cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[build-system]
requires = ['poetry-core (>=2.0.0,<3.0.0)']
build-backend = "poetry.core.masonry.api"
